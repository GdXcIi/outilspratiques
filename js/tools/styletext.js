/**
 * Module styletext.js - gestionnaire de stylisation de texte
 * Ce module permet de convertir du texte normal en diff√©rents styles de caract√®res Unicode.
 */

// Objet principal du gestionnaire de stylisation de texte
export const StyleTextManager = {
    // Propri√©t√©s
    activeStyle: 'normal',
    styles: {},
    history: [],
    
    // M√©thode d'initialisation
    init() {
        console.log('Initialisation du StyleTextManager');
        this.loadStyles();
        this.setupEventListeners();
        this.applyCurrentStyle();
    },
    
    // M√©thode pour charger les styles disponibles
    loadStyles() {
        // Style normal (texte par d√©faut)
        this.styles.normal = {
            name: 'Normal',
            preview: 'Abc',
            transform: text => text
        };
        
        // Style de contour (mathematical double-struck)
        this.styles.outline = {
            name: 'Police de contour',
            preview: 'ùïíùïìùïî',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1D552 + code + (char === char.toUpperCase() ? 26 : 0));
                    } else if (/[0-9]/.test(char)) {
                        const code = char.charCodeAt(0) - 48;
                        return String.fromCodePoint(0x1D7D8 + code);
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style de texte carr√© (squared)
        this.styles.squared = {
            name: 'Texte carr√©',
            preview: 'üÖêüÖëüÖí',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1F130 + code);
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style petites majuscules (small caps)
        this.styles.smallcaps = {
            name: 'Petites majuscules',
            preview: '·¥Ä ô·¥Ñ',
            transform: text => {
                const smallCapsMap = {
                    'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': 'Íú∞', 'g': '…¢', 'h': ' ú',
                    'i': '…™', 'j': '·¥ä', 'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò',
                    'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ', 'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x',
                    'y': ' è', 'z': '·¥¢'
                };
                
                return text.split('').map(char => {
                    const lower = char.toLowerCase();
                    return smallCapsMap[lower] || char;
                }).join('');
            }
        };
        
        // Style gras (bold)
        this.styles.bold = {
            name: 'Gras',
            preview: 'ùêÄùêõùêú',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1D41A + code + (char === char.toUpperCase() ? 26 : 0));
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style vieux texte anglais (fraktur)
        this.styles.fraktur = {
            name: 'Vieux texte anglais',
            preview: 'ùîÑùîüùî†',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1D504 + code + (char === char.toUpperCase() ? 26 : 0));
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style √† l'envers (flipped)
        this.styles.flipped = {
            name: 'Texte √† l\'envers',
            preview: '…êq…î',
            transform: text => {
                const flipMap = {
                    'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•',
                    'i': '·¥â', 'j': '…æ', 'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd',
                    'q': 'b', 'r': '…π', 's': 's', 't': ' á', 'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x',
                    'y': ' é', 'z': 'z', 'A': '‚àÄ', 'B': 'q', 'C': '∆Ü', 'D': 'p', 'E': '∆é', 'F': '‚Ñ≤',
                    'G': '◊§', 'H': 'H', 'I': 'I', 'J': '≈ø', 'K': ' û', 'L': 'À•', 'M': 'W', 'N': 'N',
                    'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': 'Íì§', 'S': 'S', 'T': '‚î¥', 'U': '‚à©', 'V': 'Œõ',
                    'W': 'M', 'X': 'X', 'Y': '‚ÖÑ', 'Z': 'Z', '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê',
                    '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•', '8': '8', '9': '6', ',': '\'', '.': 'Àô',
                    '?': '¬ø', '!': '¬°', '\'': ',', '"': ',,', '(': ')', ')': '(', '[': ']', ']': '[',
                    '{': '}', '}': '{', '<': '>', '>': '<', '&': '‚Öã', '_': '‚Äæ'
                };
                
                return text.split('').reverse().map(char => flipMap[char] || char).join('');
            }
        };
        
        // Style s√©rif (serif)
        this.styles.serif = {
            name: 'Police serif',
            preview: 'ùêÄùêõùêú',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1D5BA + code + (char === char.toUpperCase() ? 26 : 0));
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style cursive (script)
        this.styles.script = {
            name: 'Lettres cursives',
            preview: 'ùìêùì´ùì¨',
            transform: text => {
                return text.split('').map(char => {
                    if (/[a-z]/i.test(char)) {
                        const code = char.toLowerCase().charCodeAt(0) - 97;
                        return String.fromCodePoint(0x1D4D0 + code + (char === char.toUpperCase() ? 26 : 0));
                    }
                    return char;
                }).join('');
            }
        };
        
        // Style exposant (superscript)
        this.styles.superscript = {
            name: 'Exposant',
            preview: '·¥¨·µá·∂ú',
            transform: text => {
                const superMap = {
                    'a': '·µÉ', 'b': '·µá', 'c': '·∂ú', 'd': '·µà', 'e': '·µâ', 'f': '·∂†', 'g': '·µç', 'h': ' ∞',
                    'i': '‚Å±', 'j': ' ≤', 'k': '·µè', 'l': 'À°', 'm': '·µê', 'n': '‚Åø', 'o': '·µí', 'p': '·µñ',
                    'q': '·µ†', 'r': ' ≥', 's': 'À¢', 't': '·µó', 'u': '·µò', 'v': '·µõ', 'w': ' ∑', 'x': 'À£',
                    'y': ' ∏', 'z': '·∂ª', 'A': '·¥¨', 'B': '·¥Æ', 'C': '·∂ú', 'D': '·¥∞', 'E': '·¥±', 'F': '·∂†',
                    'G': '·¥≥', 'H': '·¥¥', 'I': '·¥µ', 'J': '·¥∂', 'K': '·¥∑', 'L': '·¥∏', 'M': '·¥π', 'N': '·¥∫',
                    'O': '·¥º', 'P': '·¥æ', 'Q': 'Q', 'R': '·¥ø', 'S': 'À¢', 'T': '·µÄ', 'U': '·µÅ', 'V': '‚±Ω',
                    'W': '·µÇ', 'X': 'À£', 'Y': ' ∏', 'Z': '·∂ª', '0': '‚Å∞', '1': '¬π', '2': '¬≤', '3': '¬≥',
                    '4': '‚Å¥', '5': '‚Åµ', '6': '‚Å∂', '7': '‚Å∑', '8': '‚Å∏', '9': '‚Åπ', '+': '‚Å∫', '-': '‚Åª',
                    '=': '‚Åº', '(': '‚ÅΩ', ')': '‚Åæ'
                };
                
                return text.split('').map(char => superMap[char] || char).join('');
            }
        };
    },
    
    // M√©thode pour configurer tous les √©couteurs d'√©v√©nements
    setupEventListeners() {
        // √âl√©ments du DOM
        const inputText = document.getElementById('inputText');
        const outputText = document.getElementById('outputText');
        const copyButton = document.getElementById('copyButton');
        const radioButtons = document.querySelectorAll('input[name="textStyle"]');
        
        if (!inputText || !outputText || !copyButton) {
            console.error('√âl√©ments DOM manquants pour les √©couteurs d\'√©v√©nements');
            return;
        }
        
        // √âv√©nement de saisie dans la zone de texte d'entr√©e
        inputText.addEventListener('input', () => this.applyCurrentStyle());
        
        // √âv√©nement de clic sur le bouton de copie
        copyButton.addEventListener('click', () => this.copyToClipboard());
        
        // √âv√©nement de touche pour le raccourci Ctrl+Entr√©e
        inputText.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'Enter') {
                this.applyCurrentStyle();
            }
        });
        
        // Configurer les boutons radio
        radioButtons.forEach(radio => {
            radio.addEventListener('change', () => {
                if (radio.checked) {
                    this.setActiveStyle(radio.value);
                }
            });
        });
    },
    
    // M√©thode pour d√©finir le style actif
    setActiveStyle(styleId) {
        if (!this.styles[styleId]) {
            console.error(`Style ${styleId} introuvable`);
            return;
        }
        
        // Mettre √† jour la propri√©t√© du style actif
        this.activeStyle = styleId;
        
        // Mettre √† jour le bouton radio s√©lectionn√©
        const radioButton = document.querySelector(`input[name="textStyle"][value="${styleId}"]`);
        if (radioButton) {
            radioButton.checked = true;
        }
        
        // Appliquer le style au texte
        this.applyCurrentStyle();
    },
    
    // M√©thode pour appliquer le style actuel au texte
    applyCurrentStyle() {
        const inputText = document.getElementById('inputText');
        const outputText = document.getElementById('outputText');
        
        if (!inputText || !outputText) {
            console.error('√âl√©ments de texte introuvables');
            return;
        }
        
        // R√©cup√©rer le texte d'entr√©e
        const text = inputText.value;
        
        // Si le texte est vide, vider √©galement la sortie
        if (!text.trim()) {
            outputText.value = '';
            return;
        }
        
        // Appliquer la transformation
        try {
            // R√©cup√©rer la fonction de transformation du style actif
            const transformFunction = this.styles[this.activeStyle].transform;
            
            // Appliquer la transformation
            const transformedText = transformFunction(text);
            
            // Mettre √† jour la sortie
            outputText.value = transformedText;
            
            // Ajouter l'animation de changement de style
            outputText.classList.remove('style-changed');
            // Force le red√©marrage de l'animation en utilisant setTimeout
            setTimeout(() => outputText.classList.add('style-changed'), 10);
            
        } catch (error) {
            console.error('Erreur lors de la transformation du texte:', error);
            outputText.value = 'Erreur de transformation';
        }
    },
    
    // M√©thode pour copier le texte dans le presse-papiers
    copyToClipboard() {
        const outputText = document.getElementById('outputText');
        const copyButton = document.getElementById('copyButton');
        
        if (!outputText || !copyButton) {
            console.error('√âl√©ments pour la copie introuvables');
            return;
        }
        
        try {
            // S√©lectionner le texte
            outputText.select();
            outputText.setSelectionRange(0, 99999);
            
            // Copier dans le presse-papiers
            navigator.clipboard.writeText(outputText.value)
                .then(() => {
                    // Effet visuel pour indiquer le succ√®s
                    copyButton.innerHTML = '<i class="fas fa-check"></i> Copi√© !';
                    
                    // R√©tablir le bouton apr√®s un d√©lai
                    setTimeout(() => {
                        copyButton.innerHTML = '<i class="fas fa-copy"></i> Copier dans le Presse-papiers';
                    }, 2000);
                })
                .catch(err => {
                    console.error('Erreur lors de la copie:', err);
                    alert('Impossible de copier le texte');
                });
        } catch (err) {
            console.error('Erreur lors de la copie (m√©thode alternative):', err);
            alert('Impossible de copier le texte');
        }
    },
    
    // M√©thode pour afficher une notification toast
    showToast(message, type = 'info') {
        // V√©rifier si la fonction globale existe
        if (typeof window.showToast === 'function') {
            window.showToast(message, type);
            return;
        }
        
        // Cr√©er un toast personnalis√©
        const toast = document.createElement('div');
        toast.className = `styletext-toast ${type}`;
        toast.textContent = message;
        toast.style.position = 'fixed';
        toast.style.bottom = '20px';
        toast.style.right = '20px';
        toast.style.padding = '10px 20px';
        toast.style.borderRadius = '4px';
        toast.style.backgroundColor = type === 'success' ? '#34a853' : type === 'error' ? '#ea4335' : '#4285f4';
        toast.style.color = 'white';
        toast.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
        toast.style.zIndex = '9999';
        toast.style.transform = 'translateY(20px)';
        toast.style.opacity = '0';
        toast.style.transition = 'all 0.3s ease';
        
        document.body.appendChild(toast);
        
        // Afficher avec animation
        setTimeout(() => {
            toast.style.transform = 'translateY(0)';
            toast.style.opacity = '1';
        }, 10);
        
        // Cacher apr√®s 3 secondes
        setTimeout(() => {
            toast.style.transform = 'translateY(20px)';
            toast.style.opacity = '0';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }
};

// Fonction de d√©bogage export√©e
export function debugStyleText() {
    console.log('---- D√âBOGAGE STYLETEXT MODULE ----');
    console.log('StyleTextManager initialis√©:', StyleTextManager);
    console.log('Styles disponibles:', Object.keys(StyleTextManager.styles).length);
    console.log('Style actif:', StyleTextManager.activeStyle);
    
    // V√©rifier les √©l√©ments DOM critiques
    const elements = {
        inputText: document.getElementById('inputText'),
        outputText: document.getElementById('outputText'),
        copyButton: document.getElementById('copyButton'),
        radioButtons: document.querySelectorAll('input[name="textStyle"]')
    };
    
    for (const [name, element] of Object.entries(elements)) {
        if (name === 'radioButtons') {
            console.log(`√âl√©ment ${name} trouv√©s:`, element.length);
        } else {
            console.log(`√âl√©ment ${name} trouv√©:`, !!element);
        }
    }
} 